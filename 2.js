console.log("Завдання: 2 ==============================");

// Створюємо функцію task2
function task2() {
  // Створюємо функцію promise1
  function promise1(timeout = 2000) {
    // Повертаємо новий проміс
    return new Promise((resolve, reject) => {
      // Використовуємо setTimeout для імітації асинхронної операції, яка завершується через 2 секунди.
      setTimeout(() => {
        // Після 2 секунд викликаємо resolve з результатом проміса, який є рядком "Проміс 1 виконано"
        resolve("Проміс 1 виконано")
      }, timeout)
    })
  }
  // Створюємо функцію promise2
  function promise2(timeout = 5000) {
    // Поветаємо новий проміс
    return new Promise((resolve, reject) => {
      // Використовуємо setTimeout для імітації асинхронної операції, яка завершується через 5 секунди.
      setTimeout(() => {
        // Після 5 секунд викликаємо resolve з результатом проміса, який є рядком "Проміс 2 виконано"
        resolve("Проміс 2 виконано")
      }, timeout)
    })
  }
  // Використовуємо Promise.race для визначення, який проміс виконується першим.
  // Метод повертає новий проміс, який вирішується або відхиляється негайно після розв'язання або відхилення будь-якого з промісів у переданому списку.
  Promise.race([promise1(), promise2()])
    .then((value) => {
      // У разі успіху виводимо результат
      console.log(value)
    }).catch((error) => {
      // У разі помилки виводимо повідомлення про помилку
      console.log(error)
    }).finally(() => {
      // Незалежно від результату, виводимо повідомлення про завершення обробки промісів, який є рядом "Завдання 2 завершено"
      console.log("Завдання 2 завершено")
    })

}

// Викликаємо функцію task2
task2();
